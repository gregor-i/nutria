[
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "DivergingSeries" : {
        "colorInside" : "#ffffff",
        "colorOutside" : "#000000",
        "escapeRadius" : 1001.0,
        "initial" : "lambda",
        "iteration" : "z*z+0.2*exp(z) + lambda",
        "maxIterations" : 500
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot-Mutation",
    "view" : [
      -0.47872846731922547,
      -0.6465915195786512,
      0.06676734409938126,
      0.0,
      0.0,
      0.033592320000001195
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "DivergingSeries" : {
        "colorInside" : "#ffffff",
        "colorOutside" : "#000000",
        "escapeRadius" : 100.0,
        "initial" : "lambda",
        "iteration" : "z*z + (-0.6 + i*0.6)",
        "maxIterations" : 50
      }
    },
    "reference" : [
    ],
    "title" : "Juliaset on (-0.6, 0.6)",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "DivergingSeries" : {
        "colorInside" : "#ffffff",
        "colorOutside" : "#000000",
        "escapeRadius" : 100.0,
        "initial" : "lambda",
        "iteration" : "z*z*z + (-0.12 + i*0.80)",
        "maxIterations" : 200
      }
    },
    "reference" : [
    ],
    "title" : "Juliaset on (-0.12, 0.86)",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "DivergingSeries" : {
        "colorInside" : "#ffffff",
        "colorOutside" : "#000000",
        "escapeRadius" : 100.0,
        "initial" : "0",
        "iteration" : "z*z + lambda",
        "maxIterations" : 200
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "DivergingSeries" : {
        "colorInside" : "#ffffff",
        "colorOutside" : "#000000",
        "escapeRadius" : 100.0,
        "initial" : "lambda",
        "iteration" : "z*z*z + (-0.12 + i*0.78) + lambda*z",
        "maxIterations" : 200
      }
    },
    "reference" : [
    ],
    "title" : "Juliaset-Mandelbrot-Mix",
    "view" : [
      0.27572115019387067,
      -0.36630476460063605,
      0.005191828677167718,
      0.0,
      0.0,
      0.002612138803200008
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "DivergingSeries" : {
        "colorInside" : "#ffffff",
        "colorOutside" : "#000000",
        "escapeRadius" : 100.0,
        "initial" : "0",
        "iteration" : "z*z+0.001*log(z) + lambda",
        "maxIterations" : 200
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot-Mutation",
    "view" : [
      -1.4239910488170056,
      -0.011763035633607855,
      0.040060406459627926,
      0.0,
      0.0,
      0.020155392000000303
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "DivergingSeries" : {
        "colorInside" : "#ffffff",
        "colorOutside" : "#000000",
        "escapeRadius" : 1001.0,
        "initial" : "lambda",
        "iteration" : "exp(z) + lambda",
        "maxIterations" : 500
      }
    },
    "reference" : [
    ],
    "title" : "Exp",
    "view" : [
      0.7588783553955626,
      6.66075020679108,
      0.309108074534176,
      0.0,
      0.0,
      0.15552000000000732
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "DivergingSeries" : {
        "colorInside" : "#ffffff",
        "colorOutside" : "#000000",
        "escapeRadius" : 1001.0,
        "initial" : "lambda",
        "iteration" : "exp(z) + lambda",
        "maxIterations" : 500
      }
    },
    "reference" : [
    ],
    "title" : "Exp",
    "view" : [
      1.471174448953227,
      996.911180049271,
      1.4310559006211945,
      0.0,
      0.0,
      0.7200000000000385
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "DerivedDivergingSeries" : {
        "angle" : 0.7853981633974483,
        "colorInside" : "#00003f",
        "colorLight" : "#ffffff",
        "colorShadow" : "#000000",
        "escapeRadius" : 100.0,
        "h2" : 2.0,
        "initialZ" : "lambda",
        "initialZDer" : "1",
        "iterationZ" : "z*z + (-0.6 + i*0.6)",
        "iterationZDer" : "z'*z*2 + 1",
        "maxIterations" : 200
      }
    },
    "reference" : [
    ],
    "title" : "Juliaset on (-0.6, 0.6)  with Normal Map Effect",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "the famous mandelbrot with Normal map effect",
    "program" : {
      "DerivedDivergingSeries" : {
        "angle" : 0.7853981633974483,
        "colorInside" : "#00003f",
        "colorLight" : "#ffffff",
        "colorShadow" : "#000000",
        "escapeRadius" : 100.0,
        "h2" : 2.0,
        "initialZ" : "lambda",
        "initialZDer" : "1",
        "iterationZ" : "z*z + lambda",
        "iterationZDer" : "z'*z*2 + 1",
        "maxIterations" : 200
      }
    },
    "reference" : [
      "https://www.math.univ-toulouse.fr/~cheritat/wiki-draw/index.php/Mandelbrot_set#Normal_map_effect"
    ],
    "title" : "Mandelbrot with Normal Map Effect",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "x^3 - 1",
        "initial" : "lambda",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Three Roots",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "x^5 + 1",
        "initial" : "exp(lambda)/lambda",
        "maxIterations" : 500,
        "overshoot" : 1.0,
        "threshold" : 1.0E-5
      }
    },
    "reference" : [
    ],
    "title" : "Playing with Newton Fractals",
    "view" : [
      -4.604422390913491,
      -2.974506213216784,
      11.042097998620031,
      0.0,
      0.0,
      5.555555555555703
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "exp(x)-i",
        "initial" : "lambda",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Playing with Newton Fractals",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "x^3 -x - 1",
        "initial" : "lambda",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Playing with Newton Fractals",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "x^4 + lambda",
        "initial" : "1",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Playing with Newton Fractals",
    "view" : [
      -12.706311498540042,
      -8.842488279382595,
      30.672494440610635,
      0.0,
      0.0,
      15.432098765432224
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "x^4 + lambda",
        "initial" : "lambda*lambda*lambda + 15",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Playing with Newton Fractals",
    "view" : [
      -3.7038764237103696,
      -2.992389255168824,
      11.04209799861978,
      0.0,
      0.0,
      5.555555555555577
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "x^3 + 1/x - 1",
        "initial" : "lambda",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Playing with Newton Fractals",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "x^5*exp(x) + 1",
        "initial" : "exp(lambda)/lambda",
        "maxIterations" : 500,
        "overshoot" : 1.0,
        "threshold" : 1.0E-5
      }
    },
    "reference" : [
    ],
    "title" : "Playing with Newton Fractals",
    "view" : [
      -4.165592716979138,
      -2.765975851707353,
      11.042097998620035,
      0.0,
      0.0,
      5.555555555555705
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : " exp(-x*x) + exp(-i*x*x)",
        "initial" : "lambda",
        "maxIterations" : 500,
        "overshoot" : 1.0,
        "threshold" : 1.0E-5
      }
    },
    "reference" : [
    ],
    "title" : "Playing with Newton Fractals",
    "view" : [
      -0.42849045804990804,
      0.1789044397697608,
      0.008653047795279688,
      0.0,
      0.0,
      0.0043535646720000935
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(3) with f(x) = ((x)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "((x)^2 + lambda)^2 + lambda",
        "initial" : "1-lambda",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial",
    "view" : [
      -0.2722395082412855,
      -0.3712554702655976,
      1.4310559006211268,
      0.0,
      0.0,
      0.7200000000000044
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(3) with f(x) = ((x)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 45.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "((x)^2 + lambda)^2 + lambda",
        "initial" : "1-lambda",
        "maxIterations" : 200,
        "overshoot" : 1.25,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial",
    "view" : [
      6.227911891596479,
      0.08950322108714272,
      0.02403624387577664,
      0.0,
      0.0,
      0.012093235200000123
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(3) with f(x) = ((x)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "((x)^2 + lambda)^2 + lambda",
        "initial" : "lambda",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(3) with f(x) = ((x)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 45.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "((x)^2*x - lambda)^2 + lambda",
        "initial" : "1-lambda",
        "maxIterations" : 200,
        "overshoot" : 1.25,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial",
    "view" : [
      -0.09013423830314439,
      -0.14522074300350504,
      0.5151801242236113,
      0.0,
      0.0,
      0.25920000000000437
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(3) with f(x) = ((x)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 45.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "((x)^2*x - lambda)^2 + lambda",
        "initial" : "1-lambda",
        "maxIterations" : 200,
        "overshoot" : 1.25,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial",
    "view" : [
      -3.632070470187262,
      -1.8414040418303106,
      6.625258799171954,
      0.0,
      0.0,
      3.333333333333389
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "(x * x + lambda - 1) * x - lambda",
        "initial" : "0",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Fake Mandelbrot",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(5) with f(x) = ((((x)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "(x * x + lambda - 1) * x - lambda",
        "initial" : "0",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial",
    "view" : [
      -0.32220601106340535,
      -1.9296587684993527,
      0.8586335403726716,
      0.0,
      0.0,
      0.43200000000000044
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(3) with f(x) = ((x)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 45.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "35*x^9-180*x^7+378*x^5-420*x^3+315*x",
        "initial" : "lambda",
        "maxIterations" : 200,
        "overshoot" : 1.25,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial",
    "view" : [
      -2.1546124445395654,
      -1.0359239146292238,
      3.9751552795032334,
      0.0,
      0.0,
      2.0000000000000644
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(3) with f(x) = ((x)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 45.0,
        "center" : [
          0.25,
          0.0
        ],
        "function" : "35*x^9-180*x^7+3798*x^5-420*x^3+315+x",
        "initial" : "lambda",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial",
    "view" : [
      -1.2136789200879365,
      -0.5758319146496562,
      2.385093167701948,
      0.0,
      0.0,
      1.2000000000000424
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "(x * x + sin(lambda) - 1) * x - lambda",
        "initial" : "0",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Playing with Fake Mandelbrot",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(4) with f(x) = (((x)^2 + lambda)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "(((x)^2 + lambda)^2 + lambda)^2 + lambda",
        "initial" : "lambda",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial (4)",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(3) with f(x) = ((x)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 45.0,
        "center" : [
          0.25,
          0.0
        ],
        "function" : "35*x^9-180*x^7+378*x^5-420*x^3+315+x + lambda",
        "initial" : "lambda",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial (3)",
    "view" : [
      0.24813792535967855,
      -0.36580546246323814,
      1.4310559006211703,
      0.0,
      0.0,
      0.7200000000000263
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(5) with f(x) = ((((x)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "((((x)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda",
        "initial" : "lambda",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial (5)",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(6) with f(x) = (((((x)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 50.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "(((((x)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda",
        "initial" : "lambda",
        "maxIterations" : 500,
        "overshoot" : 1.5,
        "threshold" : 0.001
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial (6)",
    "view" : [
      -0.9192773494824024,
      0.11092392546583849,
      0.11127890683229816,
      0.0,
      0.0,
      0.05598720000000001
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(6) with f(x) = (((((x)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "(((((x)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda",
        "initial" : "lambda",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial (6)",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "newton iteration over mandelbrot polynomial(7) with f(x) = ((((((x)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda, x0 = lambda",
    "program" : {
      "NewtonIteration" : {
        "brightnessFactor" : 25.0,
        "center" : [
          0.0,
          0.0
        ],
        "function" : "((((((x)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda)^2 + lambda",
        "initial" : "lambda",
        "maxIterations" : 200,
        "overshoot" : 1.0,
        "threshold" : 1.0E-4
      }
    },
    "reference" : [
    ],
    "title" : "Mandelbrot Polynomial (7)",
    "view" : [
      -2.5,
      -1.0,
      3.5,
      0.0,
      0.0,
      2.0
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "nova mandelbrot fractal of f(x) = x^3 - 1",
    "program" : {
      "FreestyleProgram" : {
        "code" : "int l = 0;\n  for(int i = 0;i< ${iterations}; i++){\n    vec2 oldz = z;\n    z = z-complex_divide(vec2(complex_product(vec2(complex_product(vec2(z), vec2(z))), vec2(z))-vec2(float(1), float(0))), vec2(complex_product(vec2(complex_product(vec2(vec2(float(2), float(0))), vec2(z))), vec2(z))))+p;\n    if(length(z - oldz) < float(0.001))\n      break;\n    l ++;\n  }\n\n  color = vec4(vec3(float(l) / float(${iterations})), 1.0);",
        "parameters" : [
          {
            "StringParameter" : {
              "literal" : "200",
              "name" : "iterations"
            }
          }
        ]
      }
    },
    "reference" : [
      ""
    ],
    "title" : "Nova Fractal",
    "view" : [
      -0.998340655107424,
      -0.0943403293080435,
      0.3255714426133771,
      0.0,
      0.0,
      0.15600298136646437
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "FreestyleProgram" : {
        "code" : "if(z.x < 0.0 || z.x > 1.0 || z.y < -0.5 || z.y > 0.5){\n    color = vec4(${color_outside}, 1.0);\n}else{\n    z = abs(fract(z)-0.5);\n    for(int i = 0; i < ${iterations} ; i++)\n    {\n        z += vec2(z.y*1.735, -z.x*1.735);\n        z.x = abs(z.x)-0.58;\n        z = -vec2(-z.y, z.x)*.865;\n    }\n\n    if(z.x > 0.0){\n        color = vec4(${color_outside}, 1.0);\n    }else{\n        color = vec4(${color_inside}, 1.0);\n    }\n}",
        "parameters" : [
          {
            "StringParameter" : {
              "literal" : "26",
              "name" : "iterations"
            }
          },
          {
            "StringParameter" : {
              "literal" : "vec3(1.0)",
              "name" : "color_outside"
            }
          },
          {
            "StringParameter" : {
              "literal" : "vec3(0.0)",
              "name" : "color_inside"
            }
          }
        ]
      }
    },
    "reference" : [
      "https://en.wikipedia.org/wiki/Koch_snowflake",
      "https://www.shadertoy.com/view/Mlf3RX"
    ],
    "title" : "Koch Snowflake",
    "view" : [
      -0.3999720289024556,
      -0.5039107933017429,
      1.9378881987578165,
      0.0,
      0.0,
      0.9780279503105854
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "FreestyleProgram" : {
        "code" : "float x = 0.5;\nfloat h = 0.0;\n\nfor( int i=0; i<${iterations}; i++ )\n{\n    for(int i=0; i<${stepsX}; i++){\n        x = z.x*x*(1.0-x); h += log2(abs(z.x*(1.0-2.0*x)));\n    }\n\n    for(int i=0; i<${stepsY}; i++){\n        x = z.y*x*(1.0-x); h += log2(abs(z.y*(1.0-2.0*x)));\n    }\n}\nh /= float(${iterations} * (${stepsX} + ${stepsY}));\n\n\nvec3 col = vec3(0.0);\nif( h<0.0 )\n{\n    h = abs(h);\n    col = (0.5 + 0.5*sin( vec3(0.0,0.4,0.7) + 2.5*h )) * pow(h,0.25);\n}\ncolor = vec4(col, 1.0);\n",
        "parameters" : [
          {
            "StringParameter" : {
              "literal" : "150",
              "name" : "iterations"
            }
          },
          {
            "StringParameter" : {
              "literal" : "6",
              "name" : "stepsX"
            }
          },
          {
            "StringParameter" : {
              "literal" : "6",
              "name" : "stepsY"
            }
          }
        ]
      }
    },
    "reference" : [
      "https://www.shadertoy.com/view/Mds3R8",
      "http://www.iquilezles.org/www/articles/lyapunovfractals/lyapunovfractals.htm"
    ],
    "title" : "Lyapunov Fractal",
    "view" : [
      2.349623209270729,
      3.364982282572452,
      1.4310559006211594,
      0.0,
      0.0,
      0.7222360248447414
    ]
  },
  {
    "antiAliase" : 1,
    "description" : "",
    "program" : {
      "FreestyleProgram" : {
        "code" : "#define calc_tri_area(A, B, C) float((((A.x - C.x) * (B.y - C.y)) - ((B.x - C.x) * (A.y - C.y))) / 2.0)\n\nconst float pi = 3.141;\n\nvec2 A = vec2(${size}*sin( 60.0/180.0*pi), ${size}*cos( 60.0/180.0*pi));\nvec2 B = vec2(${size}*sin(180.0/180.0*pi), ${size}*cos(180.0/180.0*pi));\nvec2 C = vec2(${size}*sin(300.0/180.0*pi), ${size}*cos(300.0/180.0*pi));\n\nfloat area = calc_tri_area(A, B, C);\nvec3 bary = vec3(calc_tri_area(B, C, z), calc_tri_area(C, A, z), calc_tri_area(A, B, z));\n\nif(bary.x > 0.0 || bary.y > 0.0 || bary.z > 0.0){\n    // outside\n    color = vec4(${color_outside}, 1.0);\n}else{\n    // inside\n    color = vec4(${color_inside}, 1.0);\n    for(int i = 0; i < ${iterations}; i++){\n        bary = vec3(calc_tri_area(B, C, z), calc_tri_area(C, A, z), calc_tri_area(A, B, z));\n        // inside\n        if(bary.x / area > 0.5){\n            B = 0.5 * (B + A);\n            C = 0.5 * (C + A);\n        } else if(bary.y / area > 0.5){\n            // in area near B\n            A = 0.5 * (A + B);\n            C = 0.5 * (C + B);\n        }else if(bary.z / area > 0.5){\n            // in area near C\n            A = 0.5 * (A + C);\n            B = 0.5 * (B + C);\n        }else{\n            // in the middle triangle\n            color = vec4(mix(${color_outside}, ${color_inside}, float(i)/float(${iterations})), 1.0);\n            break;\n        }\n        area /= 4.0;\n    }\n}",
        "parameters" : [
          {
            "StringParameter" : {
              "literal" : "25",
              "name" : "iterations"
            }
          },
          {
            "StringParameter" : {
              "literal" : "float(1.0)",
              "name" : "size"
            }
          },
          {
            "StringParameter" : {
              "literal" : "vec3(1.0)",
              "name" : "color_outside"
            }
          },
          {
            "StringParameter" : {
              "literal" : "vec3(0.0)",
              "name" : "color_inside"
            }
          }
        ]
      }
    },
    "reference" : [
      "https://de.wikipedia.org/wiki/Sierpinski-Dreieck",
      "https://de.wikipedia.org/wiki/Baryzentrische_Koordinaten"
    ],
    "title" : "Sierpinski Triangle",
    "view" : [
      -1.30982501628656,
      -1.2105252086917273,
      2.523809358319962,
      0.0,
      0.0,
      2.006211180124265
    ]
  },
  {
    "title": "Mandelbrot exterior distance estimator",
    "program": {
      "FreestyleProgram": {
        "code": "int l = 0;\nvec2 z_der = vec2(float(0), float(0));\n{\n   vec2 local_var_1 = vec2(float(1), float(0));\n   z_der = local_var_1;\n}\nfor(int i = 0; i < 200; i++){\n  vec2 z_new = vec2(float(0), float(0));\n  {\n    vec2 local_var_1 = complex_product(vec2(z), vec2(z));\n    vec2 local_var_2 = local_var_1+p;\n    z_new = local_var_2;\n  }\n  vec2 z_der_new = vec2(float(0), float(0));\n  {\n    vec2 local_var_1 = complex_product(vec2(z_der), vec2(z));\n    vec2 local_var_2 = vec2(float(2), float(0));\n    vec2 local_var_3 = complex_product(vec2(local_var_1), vec2(local_var_2));\n    vec2 local_var_4 = vec2(float(1), float(0));\n    vec2 local_var_5 = local_var_3+local_var_4;\n    z_der_new = local_var_5;\n  }\n  z = z_new;\n  z_der = z_der_new;\n  if(dot(z,z) > float(10000))\n    break;\n  l ++;\n}\n\nif(l == 200){\n  color = vec4(vec3(0.0), 1.0);\n}else{\n  float z_length = length(z);\n  float z_der_length = length(z_der);\n  float d = 2.0 * z_length / z_der_length * log(z_length);\n  color = vec4(vec3(d*1000.0), 1.0); // todo: do something smart here to calculate the factor\n  //color = mix(vec4(color_shadow, 1.0), vec4(color_light, 1.0), d);\n}\n",
        "parameters": []
      }
    },
    "view": [
      -1.7645988375864934,
      -1.0131959357824767,
      2.4334365753315907,
      0.0,
      0.0,
      1.9999999999999718
    ],
    "description": "",
    "reference": [
      "https://en.wikibooks.org/wiki/Fractals/Iterations_in_the_complex_plane/demm"
    ],
    "antiAliase": 1,
    "id": "7fa54c79-e13e-422f-b0ca-eb85b7ef428d",
    "owner": "0ed7f86c-5305-3a3b-ad53-15410e6c7ac9",
    "published": false
  }
]